<?php

namespace Drupal\swt_additional_content\Plugin\Condition;


use Drupal\Core\Annotation\Translation;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Condition\Annotation\Condition;
use Drupal\Core\Condition\ConditionPluginBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Provides a 'Term' condition.
 *
 * @Condition(
 *   id = "swt_additional_content_page_condition",
 *   label = @Translation("Swt Additional Content - Page Condition"),
 * )
 */
class SwtAdditionalContentPageCondition extends ConditionPluginBase {


  public function defaultConfiguration() {
    return [ 'route' => '' ] + parent::defaultConfiguration();
  }

  /**
   * @param array $form
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *
   * @return array
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {

    $form['route'] = [
      '#type' => 'textarea',
      '#title' => $this->t('Routes'),
      '#description' => $this->t('Define all routes that should define the condition. One route per line. Each line will be processed with OR condition. Each line will try to match a strpos of 0 to be validated'),
      '#default_value' => $this->configuration['route'],
    ];

    return parent::buildConfigurationForm( $form, $form_state);
  }

  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    $this->configuration['route'] = $form_state->getValue('route');
    parent::submitConfigurationForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * Evaluates the condition and returns TRUE or FALSE accordingly.
   *
   * @return bool
   *   TRUE if the condition has been met, FALSE otherwise.
   */
  public function evaluate() {

    // Only applies on AdditionContentPage route
    $route_defaults = \Drupal::routeMatch()->getRouteObject()->getDefaults();
    if( !empty($route_defaults['_controller']) && $route_defaults['_controller'] === "Drupal\swt_additional_content\Controller\SwtAdditionalContentController::page"){

      // Get the routing parameters
      $parameters = \Drupal::routeMatch()->getParameters()->all();
      if( !empty($parameters['route']) ){

        // If no routes are defined in the configuration, no checks required
        if( empty($this->configuration['route']) ){
          return !$this->isNegated();
        }

        // Else try to match a defined route
        $current_route = $parameters['route'];
        $routes = preg_split('/\n|\r\n?/', $this->configuration['route']);
        foreach ($routes as $route){
          if( strpos($current_route, $route) === 0 ){
            // Route matched.
            return !$this->isNegated();
          }
        }
      }

    }
    return FALSE;
  }

  /**
   * Provides a human readable summary of the condition's configuration.
   */
  public function summary() {
    $routes = 'Any';
    if( !empty($this->configuration['route'])){
      $routes = implode(', ',explode('\n',$this->configuration['route']));
    }

    if( $this->isNegated() ){
      return $this->t('Will not apply on additional content page that have the following routes :routes',[':routes'=>$routes]);
    }else{
      return $this->t('Will apply on additional content page that have the following routes :routes',[':routes'=>$routes]);
    }
  }

  public function getCacheContexts() {
    return Cache::mergeContexts( parent::getCacheContexts(), ['url']);
  }
}