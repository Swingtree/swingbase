<?php

namespace Drupal\swt_ws_secret_checker\Form;


use Drupal\Component\Utility\Crypt;
use Drupal\Component\Utility\Random;
use Drupal\Core\Database\Database;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

class SwtWsSecretCheckerSettingsForm extends FormBase {

  /**
   * Returns a unique string identifying the form.
   *
   * @return string
   *   The unique string identifying the form.
   */
  public function getFormId() {
    return "swt_ws_secret_checker_settings_form";
  }

  /**
   * Form constructor.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   The form structure.
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    // Show table of keys

    $keys = Database::getConnection()
      ->select('swt_ws_key_sec_registry','ks')
      ->fields('ks', [])
      ->orderBy('ks.ksid')
      ->execute()->fetchAllAssoc('ksid');

    $rows = [];
    if( empty($keys)){
      $rows[] = [$this->t('No key has been set.')];
    }else{
      foreach ($keys as $key){
        $i=2;
        $rows[] = [
          $key->name,
          $key->key,
          $key->secret,
          'TODO DEL BTN'
        ];
      }
    }

    $form['table'] = [
      '#type' => 'table',
      '#title' => $this->t('Existing keys'),
      '#header' => ['Name','Key','Secret','Operations'],
      '#rows' => $rows
    ];

    // Add action - with title name of the key
    $form['creation'] = [
      '#type' => 'container',
    ];
    $form['creation']['new_name'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Add a key/secret'),
    ];
    $form['creation']['action'] = [
      '#type' => 'submit',
      '#button_type' => 'primary',
      '#value' => $this->t('Create'),
    ];

    $form['#attached'] = [
      'library' => ['swt_ws_secret_checker/swt_ws_secret_checker.settings']
    ];

    return $form;
  }

  public function validateForm(array &$form, FormStateInterface $form_state) {

    $i=2;
    $value = $form_state->getValue('new_name');
    if( empty($value)){
      $form_state->setErrorByName('new_name', $this->t('The name of the new key/secret cannot be null') );
    }else{
      $same = Database::getConnection()
        ->select('swt_ws_key_sec_registry','ks')
        ->fields('ks',['ksid'])
        ->condition( 'ks.name' , $value)
        ->execute()->fetchAllAssoc('ks.ksid');

      if( !empty($same)){
        $form_state->setErrorByName('new_name', $this->t('The name :name already exists',[':name' => $value]) );
      }
    }

    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * Form submission handler.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    //If add -> add action
    $i=2;
    Database::getConnection()
      ->insert('swt_ws_key_sec_registry')
      ->fields([
        'name' => $form_state->getValue('new_name'),
        'created' => time(),
        'changed' => time(),
        'uid' => \Drupal::currentUser()->id(),
        '`key`' => Crypt::randomBytesBase64(16) ,
        'secret' => Crypt::randomBytesBase64(16),
      ])->execute();

    $i=2;
  }
}